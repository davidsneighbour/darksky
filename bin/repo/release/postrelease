#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

# Check if "--help" is provided
if [[ "${1:-}" == "--help" ]]; then
  echo "Usage: script_name [--help]"
  echo "This script pushes changes to GitHub, creates a release, and publishes an npm package."
  exit 0
fi

REQUIRED_TOOLS=(
  git
  sed
  node
)

# Check if all requirements are met
for TOOL in "${REQUIRED_TOOLS[@]}"; do
  if ! command -v "${TOOL}" >/dev/null; then
    echo "Error: ${TOOL} is required and not installed." >&2
    exit 1
  fi
done

VERSION=$(node -pe 'require("./package.json")["version"]')
if [[ -z "${VERSION:-}" ]]; then
  echo "Error: Could not determine version from package.json" >&2
  exit 1
fi

# Load ~/.env if it exists
GLOBAL_ENV_FILE="$HOME/.env"
if [ -f "$GLOBAL_ENV_FILE" ]; then
  echo "Loading global ~/.env"
  set -a
  # shellcheck source=/dev/null
  source "$GLOBAL_ENV_FILE"
  set +a
fi

# Override with local .env if it exists
LOCAL_ENV_FILE=".env"
if [ -f "$LOCAL_ENV_FILE" ]; then
  echo "Loading local .env"
  set -a
  # shellcheck source=/dev/null
  source "$LOCAL_ENV_FILE"
  set +a
else
  echo "No local .env file found"
fi

# Check required environment variables
if [ -z "${GITHUB_SECRET:-}" ]; then
  echo "Error: GITHUB_SECRET is not set." >&2
  exit 1
fi

if [ -z "${GITHUB_REPOSLUG:-}" ]; then
  echo "Error: GITHUB_REPOSLUG is not set." >&2
  exit 1
fi

# Push everything up
git push origin main --follow-tags
git push origin --tags

# Create a release on GitHub
CHANGES=$(jq <changes.md -Rs .)
GITHUB_REPO="https://github.com/${GITHUB_REPOSLUG}"
TAGNAME="v${VERSION}"
API_URL="https://api.github.com/repos"
URL="${GITHUB_REPO}/releases/edit/v${VERSION}"

response_body=$(curl -s -w "%{http_code}" -o response.json \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: token ${GITHUB_SECRET}" \
  "$API_URL/${GITHUB_REPOSLUG}/releases" \
  -d "{ \
      \"tag_name\":\"${TAGNAME}\", \
      \"name\":\"${TAGNAME}\", \
      \"body\":${CHANGES}, \
      \"generate_release_notes\":false \
  }")

http_code="${response_body: -3}"
if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
  echo "Release created successfully."
  rm changes.md
  xdg-open "${URL}" &>/dev/null
else
  echo "Failed to create release. Status code: $http_code"
  echo "Opening changes file for review."
  code changes.md
fi

npm publish --access public
