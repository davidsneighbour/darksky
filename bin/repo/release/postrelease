#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

# Define required tools
REQUIRED_TOOLS=(
  git
  hugo
  typos
  curl
)

# Check if all required tools are installed
for TOOL in "${REQUIRED_TOOLS[@]}"; do
  if ! command -v "${TOOL}" >/dev/null; then
    echo "Error: ${TOOL} is required but not installed. Please install ${TOOL} before running this script." >&2
    exit 1
  fi
done

# Load environment variables from .env file if it exists
# Load ~/.env if it exists
GLOBAL_ENV_FILE="$HOME/.env"
if [ -f "$GLOBAL_ENV_FILE" ]; then
  echo "Loading global ~/.env"
  set -a
  # shellcheck source=/dev/null
  source "$GLOBAL_ENV_FILE"
  set +a
fi

# Override with local .env if it exists
LOCAL_ENV_FILE=".env"
if [ -f "$LOCAL_ENV_FILE" ]; then
  echo "Loading local .env"
  set -a
  # shellcheck source=/dev/null
  source "$LOCAL_ENV_FILE"
  set +a
else
  echo "No local .env file found"
fi

# Set script and current paths
SCRIPTPATH=$(realpath "$(dirname "$0")")
CURPATH=$(realpath .)

# Quietly shut down any running Hugo servers
pkill -9 hugo || true

# Remove module replacements if applicable
if [ -f "$SCRIPTPATH/bin/etc/hugo/replacements" ]; then
  while read -r replacement; do
    go mod edit -dropreplace "${replacement}"
  done <"$SCRIPTPATH/bin/etc/hugo/replacements"
fi

# Update Hugo modules
hugo mod get -u ./...
hugo mod tidy

# Add updated go.mod and go.sum to git
git add "${CURPATH}/go.mod"
FILE="${CURPATH}/go.sum"
if [ -f "$FILE" ]; then
  git add go.sum
fi

# Remove public directory if it exists
[ -d public/ ] && rm -rf public/

# Determine new release version
step="${1:-patch}"
base=$(node -pe 'require("./package.json")["version"]')
IFS='.' read -r MAJOR MINOR PATCH <<<"$base"

case "$step" in
major)
  ((MAJOR += 1))
  MINOR=0
  PATCH=0
  ;;
minor)
  ((MINOR += 1))
  PATCH=0
  ;;
patch)
  ((PATCH += 1))
  ;;
*)
  echo "Error: Invalid argument '$step'. Use 'major', 'minor', or 'patch'." >&2
  exit 1
  ;;
esac

RELEASE="$MAJOR.$MINOR.$PATCH"

# Update CITATION.cff version and date
FILE="CITATION.cff"
if [ -f "$FILE" ]; then
  sed -i "s/^version: .*/version: ${RELEASE}/" "$FILE" || { echo "Error: Failed to update version in $FILE" >&2; exit 1; }
  DATE=$(date +%F)
  sed -i "s/date-released: .*/date-released: ${DATE}/" "$FILE" || { echo "Error: Failed to update date in $FILE" >&2; exit 1; }
  git add "$FILE"
fi

# Generate release notes
RELEASE_NOTES=$(npx commit-and-tag-version --dry-run 2>/dev/null | sed -r 's/\x1B\[[0-9;]*[mK]//g' | awk 'BEGIN { flag=0 } /^---$/ { if (flag == 0) { flag=1 } else { flag=2 }; next } flag == 1')
if [ -z "$RELEASE_NOTES" ]; then
  echo "Error: Failed to generate release notes."
